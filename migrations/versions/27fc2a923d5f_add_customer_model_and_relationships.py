"""Add Customer model and relationships

Revision ID: 27fc2a923d5f
Revises: 4d1fadc4e436
Create Date: 2025-04-23 20:55:53.016890

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column, text


# revision identifiers, used by Alembic.
revision = '27fc2a923d5f'
down_revision = '4d1fadc4e436'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('customer',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=150), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    with op.batch_alter_table('activity', schema=None) as batch_op:
        batch_op.add_column(sa.Column('customer_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key(None, 'customer', ['customer_id'], ['id'])
        batch_op.drop_column('company_name')

    with op.batch_alter_table('deal', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('updated_at', sa.DateTime(), nullable=True))
        # Step 1: Add column as nullable initially
        batch_op.add_column(sa.Column('customer_id', sa.Integer(), nullable=True))
        batch_op.alter_column('expected_close_date',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=True)
        # Create FK constraint after data population and making non-nullable
        # batch_op.create_foreign_key(None, 'customer', ['customer_id'], ['id'])
        batch_op.drop_column('customer')

    # ### end Alembic commands ###

    # ### Manually added steps to handle existing deals ###
    bind = op.get_bind()

    # Define minimal table structure for operations
    customer_table = sa.Table(
        'customer',
        sa.MetaData(),
        sa.Column('id', sa.Integer),
        sa.Column('name', sa.String)
    )
    deal_table = sa.Table(
        'deal',
        sa.MetaData(),
        sa.Column('id', sa.Integer),
        sa.Column('customer_id', sa.Integer)
    )

    # Step 2: Create default customer and update existing deals
    default_customer_name = 'Unknown Customer'
    # Use text() for direct SQL execution as ORM might not be fully available
    # Check if default customer exists
    result = bind.execute(text(f"SELECT id FROM customer WHERE name = :name"), {'name': default_customer_name}).fetchone()

    if result is None:
        # Insert default customer and get its ID (PostgreSQL specific RETURNING id)
        insert_result = bind.execute(text(f"INSERT INTO customer (name) VALUES (:name) RETURNING id"), {'name': default_customer_name})
        default_customer_id = insert_result.scalar()
    else:
        default_customer_id = result[0]

    # Update deals with NULL customer_id
    bind.execute(text("UPDATE deal SET customer_id = :customer_id WHERE customer_id IS NULL"), {'customer_id': default_customer_id})

    # Step 3: Now make the column non-nullable
    op.alter_column('deal', 'customer_id',
               existing_type=sa.Integer(),
               nullable=False)

    # Step 4: Create the foreign key constraint now that data is populated and column is non-nullable
    op.create_foreign_key('fk_deal_customer_id', 'deal', 'customer', ['customer_id'], ['id'])

    # ### End manually added steps ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('deal', schema=None) as batch_op:
        batch_op.add_column(sa.Column('customer', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
        # Use specific constraint name if provided during creation
        batch_op.drop_constraint('fk_deal_customer_id', type_='foreignkey')
        batch_op.alter_column('expected_close_date',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=True)
        batch_op.drop_column('customer_id')
        batch_op.drop_column('updated_at')
        batch_op.drop_column('created_at')

    with op.batch_alter_table('activity', schema=None) as batch_op:
        batch_op.add_column(sa.Column('company_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('customer_id')

    op.drop_table('customer')
    # ### end Alembic commands ###
